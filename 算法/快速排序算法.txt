//交换两个数值
void swap(int& num1, int& num2) {
	if (num1 == num2) {//当两个数字相等时直接返回
		return;
	}
	num1 = num1^num2;
	num2 = num1^num2;
	num1 = num1^num2;
}
//快速排序
/*
	首先选择基准点   将数据分割成两半  一边是大于基准点的 一边是小于基准点的
	设置左右的"游标"
	循环递归  找到基准点 并分割  最后达到排序的目的
*/

int parition(vector<int>& num,int left, int right) {//左开右闭
	//选区一个基准点
	int point = --right;
	while (left < right) {
		if (num[left]>num[point]) {//从左边开始发现讯在比基准点大的  开始从右边遍历
			while (--right&&right > left) {
				if (num[right] < num[point]) {
					swap(num[left], num[right]);
					break;
				}
			}
		}
		left++;
	}
	swap(num[right], num[point]);
	return right;
}

void quickSort(vector<int>& num,int left,int right) {//左开右闭的区间
	if (right-1 <= left) {
		return;
	}
	int temp=parition(num, left, right);	
	quickSort(num, left, temp);
	quickSort(num, temp + 1, right);
}
