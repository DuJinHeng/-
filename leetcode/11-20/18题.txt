给定一个包含 n 个整数的数组 nums 和一个目标值 target，判断 nums 中是否存在四个元素 a，b，c 和 d ，使得 a + b + c + d 的值与 target 相等？找出所有满足条件且不重复的四元组。

注意：

答案中不可以包含重复的四元组。
    //排序        
    void swap(int&num1, int& num2) {
        if (num1 != num2) {
            num1 = num1^num2;
            num2 = num1^num2;
            num1 = num1^num2;
        }
    }
    int parition(vector<int>& nums, int left, int right) {
        int benchMark =--right;
        while (right > left) {
            while (left<right&&nums[left] <= nums[benchMark]) {
                left++;
            }
            while (right>left&&nums[right] >= nums[benchMark]) {
                right--;
            }
            swap(nums[left], nums[right]);
        }
        swap(nums[right], nums[benchMark]);
        return right;
    }

    void quickSort(vector<int>& nums,int left,int right) {
        if ((right-left) <= 1) {
            return;
        }
        int temp=parition(nums, left, right);
        quickSort(nums, left, temp);
        quickSort(nums, temp + 1, right);
    }
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        vector<vector<int>> v;
        if(nums.size()<4){
            return v;
        }
        quickSort(nums,0,nums.size());
        int l1=0;
        while(l1<nums.size()){
            //把重复的去除
            if(l1!=0&&nums[l1]==nums[l1-1]){
                l1++;
                continue;
            }
            int r1=nums.size()-1;
            while(r1>=l1+3){
                if(r1!=nums.size()-1&&nums[r1]==nums[r1+1]){
                    r1--;
                    continue;
                }
                //如果sum一直在小于target 则退出r1的循环  ll++
                bool bl=false,br=false;
                int l2=l1+1,r2=r1-1;
                while(l2<r2){
                    if(l2!=l1+1&&nums[l2]==nums[l2-1]){
                        l2++;
                        continue;
                    }
                    if(r2!=r1-1&&nums[r2]==nums[r2+1]){
                        r2--;
                        continue;
                    }
                    int sum=nums[l1]+nums[l2]+nums[r1]+nums[r2];
                    if(sum==target){
                        vector<int> temp;
                        temp.push_back(nums[l1]);
                        temp.push_back(nums[l2]);
                        temp.push_back(nums[r2]);
                        temp.push_back(nums[r1]);
                        v.push_back(temp);
                        bl=true;br=true;
                        l2++;
                        r2--;
                    }else if(sum<target){
                        bl=true;
                        l2++;
                    }else if(sum>target){
                        br=true;
                        r2--;
                    }
                }
                if(br==false&&true==bl){
                    break;
                }
                r1--;
            }
            l1++;           
        }
        return v;
    }  
